name: CI

on:
  push:
    branches: ["develop"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

jobs:
  tests:
    name: "Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-latest"
    env:
      USING_COVERAGE: '3.8'

    strategy:
      matrix:
        python-version: ["3.8", "pypy3"]

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions          

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: "python -m tox"

  package:
    name: "Build & verify package"
    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.8"

      - name: "Install pep517 and twine"
        run: "python -m pip install pep517 twine"
      - name: "Build package"
        run: "python -m pep517.build --source --binary ."
      - name: "List result"
        run: "ls -l dist"
      - name: "Check long_description"
        run: "python -m twine check dist/*"

  install-dev:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]

    name: "Verify dev env"
    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.8"
      - name: "Install in dev mode"
        run: "python -m pip install -e .[dev]"
      - name: "Import package"
        run: "python -c 'import redbot; print(redbot.__version__)'"

  release_to_pypi:
    name: Release to PyPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Autobump version
        run: |
          # from refs/tags/v1.2.3 get 1.2.3
          echo($GITHUB_REF)
          VERSION=$(echo $GITHUB_REF | sed 's#.*/v##')
          echo($VERSION)
          PLACEHOLDER='__version__ = "develop"'
          echo($PLACEHOLDER)
          VERSION_FILE='redbot/__init__.py'
          echo($VERSION_FILE)

          # Ensure the placeholder is there. If grap doesn't find the placeholder
          # it exits with exit code 1 and github aborts the build
          grep "$PLACEHOLDER" "$VERSION_FILE"
          sed -i "s/$PLACEHOLDER/__version__ = \"${VERSION}\"/g" "$VERSION_FILE"
        shell: bash
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}
        run: |
          python -m build
          twine upload dist/*